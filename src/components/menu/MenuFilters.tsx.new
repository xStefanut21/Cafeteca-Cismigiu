'use client';

import { useState } from 'react';
import { cn } from '@/lib/utils';
import { Filter, Search, X } from 'lucide-react';

export interface FilterState {
  vegetarian: boolean;
  vegan: boolean;
  glutenFree: boolean;
  spicy: boolean;
  popular: boolean;
}

export interface MenuFiltersProps {
  filters: FilterState;
  setFilters?: (filters: FilterState) => void;
  onSearch?: (query: string) => void;
  onFilterChange?: (filters: FilterState) => void;
  className?: string;
}

export function MenuFilters({ 
  filters, 
  setFilters,
  onSearch,
  onFilterChange,
  className 
}: MenuFiltersProps) {
  const [searchQuery, setSearchQuery] = useState('');
  const [showFilters, setShowFilters] = useState(false);

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    onSearch?.(searchQuery);
  };

  const handleFilterChange = (filter: keyof FilterState) => {
    const newFilters = {
      ...filters,
      [filter]: !filters[filter],
    };
    
    if (setFilters) {
      setFilters(newFilters);
    }
    onFilterChange?.(newFilters);
  };

  const resetFilters = () => {
    setSearchQuery('');
    const resetFilters = {
      vegetarian: false,
      vegan: false,
      glutenFree: false,
      spicy: false,
      popular: false,
    };
    
    if (setFilters) {
      setFilters(resetFilters);
    }
    onFilterChange?.(resetFilters);
    onSearch?.('');
  };

  return (
    <div className={cn('mb-8', className)}>
      <div className="flex flex-col md:flex-row gap-4 mb-4">
        <form onSubmit={handleSearch} className="flex-1">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" />
            <input
              type="search"
              placeholder="Caută în meniu..."
              className="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-200 focus:ring-2 focus:ring-amber-500 focus:border-transparent dark:bg-gray-800 dark:border-gray-700 dark:text-white"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
            {searchQuery && (
              <button
                type="button"
                onClick={() => {
                  setSearchQuery('');
                  onSearch?.('');
                }}
                className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
              >
                <X className="h-4 w-4" />
              </button>
            )}
          </div>
        </form>
        
        <div className="flex gap-2">
          <button
            type="button"
            onClick={() => setShowFilters(!showFilters)}
            className="flex items-center gap-2 px-4 py-2 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
          >
            <Filter className="h-4 w-4" />
            <span>Filtre</span>
            {Object.values(filters).some(Boolean) && (
              <span className="inline-flex items-center justify-center h-5 w-5 rounded-full bg-amber-500 text-white text-xs">
                {Object.values(filters).filter(Boolean).length}
              </span>
            )}
          </button>
          
          {(Object.values(filters).some(Boolean) || searchQuery) && (
            <button
              type="button"
              onClick={resetFilters}
              className="px-3 py-2 text-sm font-medium text-amber-600 hover:text-amber-700 dark:text-amber-400 dark:hover:text-amber-300"
            >
              Resetează
            </button>
          )}
        </div>
      </div>
      
      {showFilters && (
        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg border border-gray-200 dark:border-gray-700 mb-6">
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={filters.popular || false}
                onChange={() => handleFilterChange('popular')}
                className="h-4 w-4 text-amber-500 rounded border-gray-300 focus:ring-amber-500"
              />
              <span className="text-sm font-medium text-gray-700 dark:text-gray-300">Popular</span>
            </label>
            
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={filters.vegetarian || false}
                onChange={() => handleFilterChange('vegetarian')}
                className="h-4 w-4 text-amber-500 rounded border-gray-300 focus:ring-amber-500"
              />
              <span className="text-sm font-medium text-gray-700 dark:text-gray-300">Vegetarian</span>
            </label>
            
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={filters.vegan || false}
                onChange={() => handleFilterChange('vegan')}
                className="h-4 w-4 text-amber-500 rounded border-gray-300 focus:ring-amber-500"
              />
              <span className="text-sm font-medium text-gray-700 dark:text-gray-300">Vegan</span>
            </label>
            
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={filters.glutenFree || false}
                onChange={() => handleFilterChange('glutenFree')}
                className="h-4 w-4 text-amber-500 rounded border-gray-300 focus:ring-amber-500"
              />
              <span className="text-sm font-medium text-gray-700 dark:text-gray-300">Fără gluten</span>
            </label>
            
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={filters.spicy || false}
                onChange={() => handleFilterChange('spicy')}
                className="h-4 w-4 text-amber-500 rounded border-gray-300 focus:ring-amber-500"
              />
              <span className="text-sm font-medium text-gray-700 dark:text-gray-300">Picant</span>
            </label>
          </div>
        </div>
      )}
    </div>
  );
}
